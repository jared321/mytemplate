#
# Setup and manage python virtual environments that allows users to develop and
# test the mytemplate2 python package.
#

# TODO: Add in flake8, mypy, and check-manifest.  Should these by individual tox
# environments or under a more general "check" environment?
# TODO: Run python setup.py check as well.

[tox]
requires = tox>=4
# The python version list must be maintained consistent with the python
# requirements in setup.py
#
# Run coverage on the latest python that we test.
#
# TODO: It would be nice to have an env that runs on the oldest python version
# allowed using the oldest version of all dependencies allowed.  Can we write a
# requirements.txt file for that setup and read in the versions in setup.py to
# reduce duplicated information?
env_list = py{39,310,311}-nocoverage, py311-coverage

[testenv]
description = Run the mytemplate2 full test suite
passenv = COVERAGE_FILE
setenv =
    COV_FILE = {env:COVERAGE_FILE:.coverage_mytemplate2}
deps =
    coverage: coverage
usedevelop =
    coverage: true
    nocoverage: false
commands =
    nocoverage: python -m unittest mytemplate2 -v
    coverage: coverage run --data-file={env:COV_FILE} -m unittest discover -v -s ./src/mytemplate2 -t ..

[testenv:subC]
description = Run the mytemplate2 subC test suite
commands = python -m unittest mytemplate2.subC

[testenv:report]
description = Generate coverage reports
deps = coverage
depends = coverage
skip_install = true
commands = 
    coverage report --data-file={env:COV_FILE}
    coverage html --data-file={env:COV_FILE}

[testenv:testdeploy]
description = Deploy distribution to TestPyPi for testing
deps = twine
commands = 
    # This will prompt for username/password
    python setup.py sdist
    python setup.py bdist_wheel
    # If dist was not empty beforehand, this could potentially upload many
    # different versions of distributions.
    twine upload --repository testpypi dist/*

[testenv:format]
description = Clean-up code with black
deps = black
skip_install = true
commands = black {toxindir}

